manifest {
    mainScript = 'main.nf'
}

profiles {
    standard {
        executor = 'local'
        docker.enabled = true

        process {
        }
    }

    planet {
        executor = 'sge'
        docker.enabled = false

        process {
            $assembly{
                clusterOptions = '-S /bin/bash -l h_vmem=1G'
                penv = 'smp'
                cpus = params.cpus
                if (params.method == 'metaspades') {
                    time = '24h'
                    module = 'spades'
                    }
                else {
                    time = '24h'
                    module = 'flye'
                }
            }
            if (params.assembler == 'metaflye')
                $polishing{
                    clusterOptions = '-S /bin/bash -l h_vmem=1G'
                    penv = 'smp'
                    cpus = params.cpus
                    if (params.polish == 'medaka') {
                        time = '24h'
                        module = 'medaka'
                    }
                    else if (params.polish == 'racon') {
                        time = '24h'
                        module = 'racon,minimap2'
                    }
                    else {
                        time = '24h'
                        module = 'medaka,racon,minimap2'
                    }
                }

            $assembly_qc{
                clusterOptions = '-S /bin/bash -l h_vmem=1G'
                time = '24h'
                penv = 'smp'
                cpus = params.cpus
                module = 'metaquast'
            }

            $assembly_mapping{
                clusterOptions = '-S /bin/bash -l h_vmem=1G'
                time = '24h'
                penv = 'smp'
                cpus = params.cpus
                module = 'minimap2,bwa'
            }

            $binning{
                clusterOptions = '-S /bin/bash -l h_vmem=1G'
                time = '24h'
                penv = 'smp'
                cpus = params.cpus
                module = 'metabat2'
            }
        }
    }
}