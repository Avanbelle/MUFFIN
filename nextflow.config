manifest {
    mainScript = 'main.nf'
}

profiles {
    standard {
        executor = 'local'
        docker.enabled = true

        process {
            withName:assembly{
                if (params.method == 'metaspades') {
                    container = 'TBD/spades'
                    }
                else {
                    container = 'TBD/flye'
                }
            }
            if (params.assembler == 'TBD/metaflye')
                withName:polishing{
                    if (params.polish == 'medaka') {
                        container = 'TBD/medaka'
                    }
                    else if (params.polish == 'racon') {
                        container = 'TBD/racon,TBD/minimap2'
                    }
                    else {
                        container = 'TBD/medaka,TBD/racon,TBD/minimap2'
                    }
                }

            withName:assembly_qc{
                container = 'TBD/metaquast'
            }

            withName:assembly_mapping{
                container = 'TBD/minimap2,bwa'
            }

            withName:binning{
                container = 'TBD/metabat2'
            }
        }
    }

    planet {
        executor = 'sge'
        docker.enabled = false

        process {
            withName:assembly{
                clusterOptions = '-S /bin/bash -l h_vmem=1G'
                penv = 'smp'
                if (params.method == 'metaspades') {
                    time = '24h'
                    module = 'spades'
                    }
                else {
                    time = '24h'
                    module = 'flye'
                }
            }
            if (params.assembler == 'metaflye')
                withName:polishing{
                    clusterOptions = '-S /bin/bash -l h_vmem=1G'
                    penv = 'smp'
                    if (params.polish == 'medaka') {
                        time = '24h'
                        module = 'medaka'
                    }
                    else if (params.polish == 'racon') {
                        time = '24h'
                        module = 'racon,minimap2'
                    }
                    else {
                        time = '24h'
                        module = 'medaka,racon,minimap2'
                    }
                }

            withName:assembly_qc{
                clusterOptions = '-S /bin/bash -l h_vmem=1G'
                time = '24h'
                penv = 'smp'
                module = 'metaquast'
            }

            withName:assembly_mapping{
                clusterOptions = '-S /bin/bash -l h_vmem=1G'
                time = '24h'
                penv = 'smp'
                module = 'minimap2,bwa'
            }

            withName:binning{
                clusterOptions = '-S /bin/bash -l h_vmem=1G'
                time = '24h'
                penv = 'smp'
                module = 'metabat2'
            }
        }
    }
    conda {
        executor = 'conda'

        process {
            withName: 'assembly' {
                if (params.method == 'metaspades') {
                    process.conda = 'bioconda::spades'
                    }
                else if (params.method == 'metaflye') {
                    process.conda = 'bioconda::flye'
                }
            }
            if (params.method == 'metaflye')
                withName: 'polishing' {
                    if (params.polish == 'medaka') {
                        process.conda = 'bioconda::medaka'
                    }
                    else if (params.polish == 'racon') {
                        process.conda = 'bioconda::racon bioconda::minimap2'
                    }
                    else {
                        process.conda = 'bioconda::medaka bioconda::racon bioconda::minimap2'
                    }
                }

            withName: 'assembly_qc' {
               process.conda = 'metaquast'
            }

            withName: 'assembly_mapping'{
                process.conda = 'bioconda::minimap2 bioconda::bwa'
            }

            withName: 'binning'{
                process.conda = 'bioconda::metabat2'
            }
        }
    }
}